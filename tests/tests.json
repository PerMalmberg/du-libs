{"slots":{"0":{"name":"slot1","type":{"methods":[],"events":[]}},"1":{"name":"slot2","type":{"methods":[],"events":[]}},"2":{"name":"slot3","type":{"methods":[],"events":[]}},"3":{"name":"slot4","type":{"methods":[],"events":[]}},"4":{"name":"slot5","type":{"methods":[],"events":[]}},"5":{"name":"slot6","type":{"methods":[],"events":[]}},"6":{"name":"slot7","type":{"methods":[],"events":[]}},"7":{"name":"slot8","type":{"methods":[],"events":[]}},"8":{"name":"slot9","type":{"methods":[],"events":[]}},"9":{"name":"slot10","type":{"methods":[],"events":[]}},"-1":{"name":"unit","type":{"methods":[],"events":[]},"_elementType":"control"},"-2":{"name":"system","type":{"methods":[],"events":[]},"_elementType":"system"},"-3":{"name":"library","type":{"methods":[],"events":[]},"_elementType":"library"}},"handlers":[{"key":"0","filter":{"slotKey":-1,"signature":"start()","args":[]},"code":"package.preload['ElementManager'] = (function (...)\nElementManager = {}\n\nlocal instance = nil\n\nfunction ElementManager:Instance()\n    if instance == nil then\n\n        instance = {}\n        setmetatable(instance, self)\n        self.__index = self\n\n        instance.Core = nil\n        instance.Screen = {}\n        instance.Container = {}\n        instance.Switch = {}\n        instance.Button = {}\n        instance.Emitter = {}\n        instance.Receiver = {}\n        instance.Light = {}\n        instance.Industry = {}\n        instance.Databank = {}\n        instance.Emitter = {}\n\n        instance.slots = {slot1, slot2, slot3, slot4, slot5, slot6, slot7, slot8, slot9, slot10}\n        instance.linked = false\n    end\n\n    instance:link()\n\n    return instance\nend\n\nfunction ElementManager:link()\n    if not self.linked then\n        for i = 1, #self.slots do\n            local slot = self.slots[i]\n            if slot ~= nil then\n                local elementClass = slot.getElementClass()\n                \n                if elementClass == 'CoreUnitStatic'\n                or elementClass == 'CoreUnitSpace'\n                or elementClass == 'CoreUnitDynamic' then\n                    self.Core = slot\n                elseif (elementClass == 'ScreenUnit') then\n                    table.insert(self.Screen, #self.Screen + 1, slot)\n                elseif (elementClass == 'ItemContainer') then\n                    table.insert(self.Container, #self.Container + 1, slot)\n                elseif (elementClass == 'ManualSwitchUnit') then\n                    table.insert(self.Switch, #self.Switch + 1, slot)\n                elseif (elementClass == 'ManualButtonUnit') then\n                    table.insert(self.Button, #self.Button + 1, slot)\n                elseif (elementClass == 'EmitterUnit') then\n                    table.insert(self.Emitter, #self.Emitter + 1, slot)\n                elseif (elementClass == 'ReceiverUnit') then\n                    table.insert(self.Receiver, #self.Receiver + 1, slot)\n                elseif (elementClass == 'LightUnit') then\n                    table.insert(self.Light, #self.Light + 1, slot)\n                elseif (elementClass == 'IndustryUnit') then\n                    table.insert(self.Industry, #self.Industry + 1, slot)\n                elseif (elementClass == 'DataBankUnit') then\n                    table.insert(self.Databank, #self.Databank + 1, slot)\n                elseif (elementClass == 'Emitter') then\n                    table.insert(self.Emitter, #self.Emitter + 1, slot)\n                else                \n                    system.print(elementClass)\n                end\n            end\n        end\n\n--[[        system.print(\"Found elements:\")        \n        system.print(\"Core:      \" .. tostring(self.Core ~= nil))\n        system.print(\"Screen:    \" .. #self.Screen)\n        system.print(\"Container: \" .. #self.Container)\n        system.print(\"Switch:    \" .. #self.Switch)\n        system.print(\"Button:    \" .. #self.Button)\n        system.print(\"Emitter:   \" .. #self.Emitter)\n        system.print(\"Receiver:  \" .. #self.Receiver)\n        system.print(\"Light:     \" .. #self.Light)\n        system.print(\"Industry:  \" .. #self.Industry)\n        system.print(\"Databank:  \" .. #self.Databank)\n]]\n\n        linked = true\n    end\nend\n\nfunction ElementManager:GetElementNameOfSlot(slot)\n    return self.Core.getElementNameById(slot.getId())\nend\n\nfunction ElementManager:GetElementByName(name)\n    local element = nil\n\n    for i, s in ipairs(self.slots) do\n        if s ~= nil then\n            if name == self:GetElementNameOfSlot(s) then\n                element = s\n                break\n            end\n        end\n    end\n\n    return element\nend\n\nfunction ElementManager:IsDatabank(slot)\n    local elementClass = slot.getElementClass()\n    return elementClass == \"DataBankUnit\"   \nend\n\nfunction ElementManager:IsScreen(slot)\n    local elementClass = slot.getElementClass()\n    return elementClass == \"ScreenUnit\"   \nend end)\npackage.preload['SkillManager'] = (function (...)\nlocal containerOptimizationLevel = 0 --export: Container Optimization Level\nlocal containerProficiencyLevel = 0 --export: Container Proficiency Level\n\nSkillManager = {}\n\nlocal skillManagerInstance = nil\n\nfunction SkillManager:Instance()\n    if skillManagerInstance == nil then\n\n        skillManagerInstance = {}\n        setmetatable(skillManagerInstance, self)\n        self.__index = self\n    end\n\n    return skillManagerInstance\nend\n\nfunction SkillManager:CalculateActualMass(reducedMass)\n    local mass = reducedMass\n\n    if containerOptimizationLevel > 0 then\n       mass = mass / (1 - containerOptimizationLevel * 0.05)\n    end\n\n    return mass\nend\n\nfunction SkillManager:ApplyContainerProficency(baseVolume)\n    local perLevel = 0.1\n\n    local volume = baseVolume\n\n    if containerProficiencyLevel > 0 then\n        volume = volume * (1 + containerProficiencyLevel * perLevel)\n    end\n\n    return volume\nend\n\nfunction SkillManager:ToString()\n    local s = \"Container Optimization Level: \" .. containerOptimizationLevel .. \", \" ..\n    \"Container Proficiency Level: \" .. containerProficiencyLevel\n    return s\nend end)\npackage.preload['ContainerManager'] = (function (...)\nrequire(\"ElementManager\")\nrequire(\"SkillManager\")\n\nContainer = {}\n\nfunction Container:New(elementId, core)\n    local o = {}\n    setmetatable(o, self)\n    self.__index = self\n    o.id = elementId\n    o.core = core\n    o.ElementMass = 0\n    o.Capacity = 0\n    o.Name = \"<Unknown>\"\n    o.ReducedContentMass = 0\n    o.ActualContentMass = 0\n    o.ContentVolume = 0\n\n    o:update()\n\n    return o\nend\n\nfunction Container:update()\n    self:updateBaseData()\n\n    -- The mass we get here is adjusted for skills applied to the container.\n    self.ReducedContentMass = self.core.getElementMassById(self.id) - self.ElementMass\n    skill = SkillManager:Instance()\n    self.ActualContentMass = skill:CalculateActualMass(self.ReducedContentMass)\nend\n\nfunction Container:updateBaseData()\n    local core = self.core\n    local maxHitPoints = core.getElementMaxHitPointsById(self.id)\n\n    skill = SkillManager:Instance()\n\n    if maxHitPoints >= 69267 then\n        -- XXL\n        self.ElementMass = 884013\n        self.Capacity = skill:ApplyContainerProficency(512000)\n    elseif maxHitPoints >= 34633 then\n        -- XL\n        self.ElementMass = 44206\n        self.Capacity = skill:ApplyContainerProficency(256000)\n    elseif maxHitPoints >= 17316 then\n        -- L\n        self.ElementMass = 14842.7\n        self.Capacity = skill:ApplyContainerProficency(128000)\n    elseif maxHitPoints >= 7997 then\n        -- M\n        self.ElementMass = 7421.35\n        self.Capacity = skill:ApplyContainerProficency(64000)\n    elseif maxHitPoints >= 999 then\n        -- S\n        self.ElementMass = 1281.31\n        self.Capacity = skill:ApplyContainerProficency(8000)\n    else\n        -- xs\n        o.ElementMass = 229.09\n        self.Capacity = skill:ApplyContainerProficency(1000)\n    end\n\n    self.Name = core.getElementNameById(self.id)\n\n    return o\nend\n\nfunction Container:ToString()\n    local s = self.Name .. \": \" .. self.Capacity .. \"L\" .. \n    \" Element mass: \" .. self.ElementMass .. \"kg, Reduced Content mass: \" .. self.ReducedContentMass ..\n    \" Actual Content Mass: \" .. self.ActualContentMass\n    return s\nend\n\nfunction Container:ItemCount(weightOfOneItem)\n    return self.ActualContentMass / weightOfOneItem\nend\n\nfunction Container:ItemVolume(volumeOfOneItem, weightOfOneItem)\n    local count = self:ItemCount(weightOfOneItem)\n    return count * volumeOfOneItem\nend\n\nfunction Container:FillFactor(volumeOfOneItem, weightOfOneItem)\n    local contentVolume = self:ItemVolume(volumeOfOneItem,weightOfOneItem)\n    return contentVolume / self.Capacity\nend\n\n\n\nContainerManager = {}\n\nfunction ContainerManager:New()\n    local o = {}\n    setmetatable(o, self)\n    self.__index = self\n    self.containersByName = {}\n\n    return o\nend\n\nfunction ContainerManager:Update()\n    local core = ElementManager:Instance().Core\n\n    local element_ids = core.getElementIdList()\n\n    for _, id in pairs(element_ids) do\n        if core.getElementTypeById(id) == \"Container\" then      \n            local c = Container:New(id, core)\n\n            self.containersByName[c.Name] = c\n         end\n    end\n\n    table.sort(self.containersByName,\n        function (a, b) return string.lower(a.Name) < string.lower(b.Name) end)\n\nend\n\nfunction ContainerManager:GetContainerByName(name)\n    return self.containersByName[name]\nend\n\n\n end)\npackage.preload['string_util'] = (function (...)\nfunction split(str, pat)\n    -- http://lua-users.org/wiki/SplitJoin\n\n   local t = {}  -- NOTE: use {n = 0} in Lua-5.0\n   local fpat = \"(.-)\" .. pat\n   local last_end = 1\n   local s, e, cap = str:find(fpat, 1)\n   while s do\n      if s ~= 1 or cap ~= \"\" then\n         table.insert(t, cap)\n      end\n      last_end = e+1\n      s, e, cap = str:find(fpat, last_end)\n   end\n   if last_end <= #str then\n      cap = str:sub(last_end)\n      table.insert(t, cap)\n   end\n   return t\nend\n\nfunction round(num, numDecimalPlaces)\n   local mult = 10^(numDecimalPlaces or 0)\n   return math.floor(num * mult + 0.5) / mult\nend\n\nfunction removeDecimal(s)\n   return s:gsub(\"%.%d\", \"\")\nend\n\nfunction padLeft(s, width)\n   if #s < width then\n       s = string.rep('&nbsp;', width - #s) .. s\n   end\n\n   return s\nend\n\nfunction formatThousands(value)\n   local formatted = value\n   done = false\n\n   while not done do\n       formatted, k = string.gsub(formatted, \"^(-?%d+)(%d%d%d)\", '%1 %2')\n       done = k == 0\n   end\n\n   return formatted\nend\n end)\nrequire(\"ElementManager\")\nrequire(\"ContainerManager\")\nrequire(\"SkillManager\")\nrequire(\"string_util\")\n\nscript = {}\n\nfunction script.onStart()\n\n    system.print(SkillManager:Instance():ToString())\n\n    local el = ElementManager:Instance()\n    assert(el.Core ~= nil, \"Core not linked\")\n    assert(#el.Screen > 0, \"Screen not linked\")\n    assert(#el.Emitter > 0, \"Emitter not linked\")\n    assert(#el.Receiver > 0, \"Receiver not linked\")\n    assert(#el.Databank > 0, \"Databank not linked\")\n\n    assert(el:GetElementByName(\"foo\") == nil, \"Should not find element\")\n    assert(el:GetElementByName(\"TheCore\"), \"Should find element\")\n\n    local conMgr = ContainerManager:New()\n    conMgr:Update()\n\n    local alu = conMgr:GetContainerByName(\"Aluminium Scrap\")\n    assert(alu ~= nil, \"Aluminium container not found\")\n    system.print(alu:ToString())\n    assert(alu.Capacity == 9600, \"Capacity does not match (check skill levels)\")\n    assert(alu:ItemCount(2.7) == 100, \"Wrong item count\")\n    assert(alu:ItemVolume(1, 2.7) == 100, \"Wrong volume\")\n    assert(round(alu:FillFactor(1, 2.7), 4) == 0.0104, \"Wrong fill factor\")\n    \n    local sod = conMgr:GetContainerByName(\"Sodium Scrap\")\n    assert(sod ~= nil, \"Sodium container not found\")\n    system.print(sod:ToString())\n    assert(sod.Capacity == 9600, \"Capacity does not match (check skill levels)\")\n    assert(sod:ItemCount(0.97) == 50, \"Wrong item count\")\n    assert(sod:ItemVolume(1, 0.97) == 50, \"Wrong volume\")\n    assert(round(sod:FillFactor(1, 0.97), 4) == 0.0052, \"Wrong fill factor\")\n\nend\n\nscript.onStart()"},{"key":"1","filter":{"slotKey":-1,"signature":"stop()","args":[]},"code":"if script.onStop then script.onStop(unit) end"},{"key":"2","filter":{"slotKey":-1,"signature":"tick(timerId)","args":[{"variable":"*"}]},"code":"if script.onTick then script.onTick(timerId,unit) end"},{"key":"3","filter":{"slotKey":-2,"signature":"actionStart(action)","args":[{"variable":"*"}]},"code":"if script.onActionStart then script.onActionStart(action,system) end"},{"key":"4","filter":{"slotKey":-2,"signature":"actionStop(action)","args":[{"variable":"*"}]},"code":"if script.onActionStop then script.onActionStop(action,system) end"},{"key":"5","filter":{"slotKey":-2,"signature":"actionLoop(action)","args":[{"variable":"*"}]},"code":"if script.onActionLoop then script.onActionLoop(action,system) end"},{"key":"6","filter":{"slotKey":-2,"signature":"update()","args":[]},"code":"if script.onUpdate then script.onUpdate(system) end"},{"key":"7","filter":{"slotKey":-2,"signature":"flush()","args":[]},"code":"if script.onFlush then script.onFlush(system) end"}],"methods":[],"events":[]}